@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudMainContent>
        <MudAppBar>
            <MudSpacer />
            @if (_isLoggedIn)
            {                
                <MudButton Variant="Variant.Outlined" OnClick="Logout" Color="Color.Success">
                    Deslogar
                </MudButton>
            }            
        </MudAppBar>
        @Body
        <MudAppBar Bottom="true" Elevation="1" Fixed="true">
            <MudSpacer />
            <MudButton Variant="Variant.Text" OnClick="ToggleMode">
                <MudIcon Color="@(_isDarkMode ? Color.Info : Color.Warning)" Icon="@Icons.Material.Outlined.LightMode" />
                <MudIcon Color="Color.Default" Icon="@(_isDarkMode ? Icons.Material.Outlined.ArrowForward : Icons.Material.Outlined.ArrowBack)" />
                <MudIcon Color="@(_isDarkMode ? Color.Warning : Color.Info)" Icon="@Icons.Material.Outlined.ModeNight" />
            </MudButton>

            
        </MudAppBar>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    private bool _isLoggedIn;

    [Inject] private AuthService AuthService { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await CheckAuthenticationStatus();
            StateHasChanged();
            AuthService.OnAuthenticationStateChanged += HandleAuthenticationStateChanged;
        }
    }   

    private async Task CheckAuthenticationStatus()
    {
        var token = await AuthService.GetTokenAsync();
        _isLoggedIn = !string.IsNullOrWhiteSpace(token);
    }

    private void HandleAuthenticationStateChanged()
    {
        InvokeAsync(async () =>
        {
            await CheckAuthenticationStatus();
            StateHasChanged(); // Atualiza a interface ao detectar mudanças
        });
    }

    private async Task Logout()
    {
        if (_isLoggedIn)
        {
            // Logout
            await AuthService.LogoutAsync();
            _isLoggedIn = false;

            // Redireciona para a tela de login
            Navigation.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        // Remove a inscrição do evento ao descartar o componente
        AuthService.OnAuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }

    private void ToggleMode()
    {
        _isDarkMode = !_isDarkMode;
    }
}
